<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dk.data.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.dk.data.entity.User">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="uuid" jdbcType="VARCHAR" property="uuid" />
        <result column="nickname" jdbcType="VARCHAR" property="nickname" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="sex" jdbcType="TINYINT" property="sex" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="avatar" jdbcType="VARCHAR" property="avatar" />
        <result column="phone" jdbcType="VARCHAR" property="phone" />
        <result column="tel" jdbcType="VARCHAR" property="tel" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="idcard" jdbcType="VARCHAR" property="idcard" />
        <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
        <result column="area" jdbcType="BIGINT" property="area" />
        <result column="autograph" jdbcType="VARCHAR" property="autograph" />
        <result column="openid" jdbcType="VARCHAR" property="openid" />
        <result column="active" jdbcType="TINYINT" property="active" />
        <result column="referee" jdbcType="BIGINT" property="referee" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
        <result column="deleted" jdbcType="BIT" property="deleted" />
    </resultMap>

    <sql id="baseColumn">
        id,uuid,nickname,username,sex,password,avatar,phone,tel,email,idcard,birthday,area,autograph,
		openid,active,referee,create_time,update_time,last_login_time,deleted
    </sql>

    <insert id="batchInsert" parameterType="java.util.List" keyProperty="id" useGeneratedKeys="true">
        insert into t_user (
        uuid,nickname,username,sex,password,avatar,phone,tel,email,idcard,birthday,area,autograph,
		openid,active,referee,create_time,update_time,last_login_time,deleted
        )
        values
        <foreach item="item" collection="list" separator=",">
         (#{item.uuid,jdbcType=VARCHAR},#{item.nickname,jdbcType=VARCHAR},
		#{item.username,jdbcType=VARCHAR},#{item.sex,jdbcType=TINYINT},#{item.password,jdbcType=VARCHAR},
		#{item.avatar,jdbcType=VARCHAR},#{item.phone,jdbcType=VARCHAR},
		#{item.tel,jdbcType=VARCHAR},#{item.email,jdbcType=VARCHAR},#{item.idcard,jdbcType=VARCHAR},
		#{item.birthday,jdbcType=TIMESTAMP},#{item.area,jdbcType=BIGINT},
		#{item.autograph,jdbcType=VARCHAR},#{item.openid,jdbcType=VARCHAR},#{item.active,jdbcType=TINYINT},
		#{item.referee,jdbcType=BIGINT},#{item.createTime,jdbcType=TIMESTAMP},
		#{item.updateTime,jdbcType=TIMESTAMP},#{item.lastLoginTime,jdbcType=TIMESTAMP},#{item.deleted,jdbcType=BIT})
        </foreach>
    </insert>
    <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
        update t_user
        set deleted = true
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="deleteByUuid" parameterType="java.lang.String">
        update t_user
        set deleted = true
        where uuid = #{uuid,jdbcType=VARCHAR}
    </update>
    <update id="batchDeleteById" parameterType="java.util.List">
        update t_user
        set deleted = true
        where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id,jdbcType=BIGINT}
        </foreach>
    </update>
    <update id="batchDeleteByUuid" parameterType="java.util.List">
        update t_user
        set deleted = true
        where uuid in
        <foreach collection="list" item="uuid" open="(" separator="," close=")">
            #{uuid,jdbcType=VARCHAR}
        </foreach>
    </update>
    <select id="findAll" resultMap="BaseResultMap">
        select <include refid="baseColumn"/>
        from t_user
        where deleted = false
        <include refid="whereSql"/>
        <include refid="orderSql"/>
    </select>
    <select id="count" resultType="java.lang.Integer">
        select count(id)
        from t_user
        where deleted = false
        <include refid="whereSql"/>
    </select>
    <select id="findByUuid" parameterType="java.lang.String" resultMap="BaseResultMap">
        select <include refid="baseColumn"/>
        from t_user
        where uuid = #{uuid}
    </select>
    <select id="batchQueryByIds" parameterType="java.util.List" resultMap="BaseResultMap">
        select <include refid="baseColumn"/>
        from t_user
        where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and deleted = false
    </select>
    <select id="batchQueryByUuids" parameterType="java.util.List" resultMap="BaseResultMap">
        select <include refid="baseColumn"/>
        from t_user
        where id in
        <foreach collection="list" item="uuid" open="(" separator="," close=")">
            '${uuid}'
        </foreach>
        and deleted = false
    </select>
    <sql id="whereSql">
        <if test="condition.nickname != null and condition.nickname != ''">
            and nickname like CONCAT('%',#{condition.nickname},'%')
        </if>
        <if test="condition.username != null and condition.username != ''">
            and username like CONCAT('%',#{condition.username},'%')
        </if>
        <if test="condition.sex != null">
            and sex = #{condition.sex}
        </if>
        <if test="condition.password != null and condition.password != ''">
            and password like CONCAT('%',#{condition.password},'%')
        </if>
        <if test="condition.avatar != null and condition.avatar != ''">
            and avatar like CONCAT('%',#{condition.avatar},'%')
        </if>
        <if test="condition.phone != null and condition.phone != ''">
            and phone like CONCAT('%',#{condition.phone},'%')
        </if>
        <if test="condition.tel != null and condition.tel != ''">
            and tel like CONCAT('%',#{condition.tel},'%')
        </if>
        <if test="condition.email != null and condition.email != ''">
            and email like CONCAT('%',#{condition.email},'%')
        </if>
        <if test="condition.idcard != null and condition.idcard != ''">
            and idcard like CONCAT('%',#{condition.idcard},'%')
        </if>
        <if test="condition.birthday != null">
            <![CDATA[  and DATE_FORMAT(birthday, '%Y-%m-%d') >=  DATE_FORMAT(#{birthday}, '%Y-%m-%d')   ]]>
        </if>
        <if test="condition.area != null">
            and area = #{condition.area}
        </if>
        <if test="condition.autograph != null and condition.autograph != ''">
            and autograph like CONCAT('%',#{condition.autograph},'%')
        </if>
        <if test="condition.openid != null and condition.openid != ''">
            and openid like CONCAT('%',#{condition.openid},'%')
        </if>
        <if test="condition.active != null">
            and active = #{condition.active}
        </if>
        <if test="condition.referee != null">
            and referee = #{condition.referee}
        </if>
        <if test="condition.createTime != null">
            <![CDATA[  and DATE_FORMAT(create_time, '%Y-%m-%d') >=  DATE_FORMAT(#{createTime}, '%Y-%m-%d')   ]]>
        </if>
        <if test="condition.updateTime != null">
            <![CDATA[  and DATE_FORMAT(update_time, '%Y-%m-%d') >=  DATE_FORMAT(#{updateTime}, '%Y-%m-%d')   ]]>
        </if>
        <if test="condition.lastLoginTime != null">
            <![CDATA[  and DATE_FORMAT(last_login_time, '%Y-%m-%d') >=  DATE_FORMAT(#{lastLoginTime}, '%Y-%m-%d')   ]]>
        </if>
    </sql>
    <sql id="orderSql">
        <if test="condition.field != null and condition.field != '' and condition.order != null and condition.order != ''">
            order by ${condition.field} ${condition.order}
        </if>
        <if test="condition.field != null and condition.field != '' and (condition.order == null or condition.order == '')">
            order by ${condition.field} desc
        </if>
        <if test="(condition.field == null or condition.field == '') and (condition.order == null or condition.order == '')">
            order by id desc
        </if>
    </sql>
</mapper>